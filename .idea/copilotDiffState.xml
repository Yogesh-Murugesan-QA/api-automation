<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;groupId&gt;com.assignment&lt;/groupId&gt;&#10;    &lt;artifactId&gt;api-automation&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.rest-assured&lt;/groupId&gt;&#10;            &lt;artifactId&gt;rest-assured&lt;/artifactId&gt;&#10;            &lt;version&gt;5.4.0&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.testng&lt;/groupId&gt;&#10;            &lt;artifactId&gt;testng&lt;/artifactId&gt;&#10;            &lt;version&gt;7.10.2&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.hamcrest&lt;/groupId&gt;&#10;            &lt;artifactId&gt;hamcrest&lt;/artifactId&gt;&#10;            &lt;version&gt;2.2&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.0.0-M7&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;includes&gt;&#10;                        &lt;include&gt;**/*Test.java&lt;/include&gt;&#10;                    &lt;/includes&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
              <option name="updatedContent" value="&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;groupId&gt;com.assignment&lt;/groupId&gt;&#10;    &lt;artifactId&gt;api-automation&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.rest-assured&lt;/groupId&gt;&#10;            &lt;artifactId&gt;rest-assured&lt;/artifactId&gt;&#10;            &lt;version&gt;5.4.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.testng&lt;/groupId&gt;&#10;            &lt;artifactId&gt;testng&lt;/artifactId&gt;&#10;            &lt;version&gt;7.10.2&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.hamcrest&lt;/groupId&gt;&#10;            &lt;artifactId&gt;hamcrest&lt;/artifactId&gt;&#10;            &lt;version&gt;2.2&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.0.0-M7&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;includes&gt;&#10;                        &lt;include&gt;**/*Test.java&lt;/include&gt;&#10;                    &lt;/includes&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/utils/ApiUtils.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/utils/ApiUtils.java" />
              <option name="originalContent" value="package utils;&#10;&#10;import io.restassured.RestAssured;&#10;import io.restassured.http.ContentType;&#10;import io.restassured.response.Response;&#10;&#10;import static io.restassured.RestAssured.given;&#10;&#10;public class ApiUtils {&#10;&#10;    public static Response get(String endpoint, String apiKey) {&#10;        return RestAssured.given()&#10;                .header(&quot;api-key&quot;, apiKey)&#10;                .get(endpoint)&#10;                .then()&#10;                .extract().response();&#10;    }&#10;&#10;    public static Response post(String endpoint, String apiKey, String payload) {&#10;        return RestAssured.given()&#10;                .contentType(ContentType.JSON)&#10;                .header(&quot;api-key&quot;, apiKey)&#10;                .body(payload)&#10;                .post(endpoint)&#10;                .then()&#10;                .extract().response();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package utils;&#10;&#10;import io.restassured.RestAssured;&#10;import io.restassured.http.ContentType;&#10;import io.restassured.response.Response;&#10;&#10;import static io.restassured.RestAssured.given;&#10;&#10;public class ApiUtils {&#10;&#10;    public static Response get(String endpoint, String apiKey) {&#10;        if (apiKey != null) {&#10;            return RestAssured.given()&#10;                    .header(&quot;api-key&quot;, apiKey)&#10;                    .get(endpoint)&#10;                    .then()&#10;                    .extract().response();&#10;        } else {&#10;            return RestAssured.given()&#10;                    .get(endpoint)&#10;                    .then()&#10;                    .extract().response();&#10;        }&#10;    }&#10;&#10;    public static Response post(String endpoint, String apiKey, String payload) {&#10;        if (apiKey != null) {&#10;            return RestAssured.given()&#10;                    .contentType(ContentType.JSON)&#10;                    .header(&quot;api-key&quot;, apiKey)&#10;                    .body(payload)&#10;                    .post(endpoint)&#10;                    .then()&#10;                    .extract().response();&#10;        } else {&#10;            return RestAssured.given()&#10;                    .contentType(ContentType.JSON)&#10;                    .body(payload)&#10;                    .post(endpoint)&#10;                    .then()&#10;                    .extract().response();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/utils/TransactionUtils.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/utils/TransactionUtils.java" />
              <option name="originalContent" value="package utils;&#10;&#10;public class TransactionUtils {&#10;&#10;    public static Object createTransaction(String apiKey, int fromId, int toId, int amount, String currency) {&#10;        String payload = String.format(&quot;{ \&quot;fromAccountId\&quot;: %d, \&quot;toAccountId\&quot;: %d, \&quot;amount\&quot;: %d, \&quot;currency\&quot;: \&quot;%s\&quot; }&quot;,&#10;                fromId, toId, amount, currency);&#10;        return ApiUtils.post(&quot;/api/v1/transactions&quot;, apiKey, payload);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package utils;&#10;&#10;import io.restassured.response.Response;&#10;&#10;public class TransactionUtils {&#10;&#10;    public static Response createTransaction(String apiKey, int fromId, int toId, int amount, String currency) {&#10;        String payload = String.format(&quot;{ \&quot;fromAccountId\&quot;: %d, \&quot;toAccountId\&quot;: %d, \&quot;amount\&quot;: %d, \&quot;currency\&quot;: \&quot;%s\&quot; }&quot;,&#10;                fromId, toId, amount, currency);&#10;        return ApiUtils.post(&quot;/api/v1/transactions&quot;, apiKey, payload);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/tests/InvalidTransactionTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/tests/InvalidTransactionTest.java" />
              <option name="originalContent" value="package tests;&#10;&#10;import io.restassured.response.Response;&#10;import org.testng.Assert;&#10;import org.testng.annotations.Test;&#10;import tests.base.BaseTest;&#10;import utils.ApiUtils;&#10;import utils.AccountUtils;&#10;import utils.TransactionUtils;&#10;&#10;public class InvalidTransactionTest extends BaseTest {&#10;    private String apiKey;&#10;    private int fromAccountId;&#10;    private int toAccountId;&#10;&#10;    @Test(priority = 1)&#10;    public void generateApiKey() {&#10;        Response res = ApiUtils.get(&quot;/api/v1/auth&quot;, null); // No apiKey needed for auth&#10;        apiKey = res.jsonPath().getString(&quot;apiKey&quot;);&#10;        Assert.assertNotNull(apiKey, &quot;API Key should not be null&quot;);&#10;    }&#10;&#10;    @Test(priority = 2)&#10;    public void createFromAccountWithZeroBalance() {&#10;        fromAccountId = AccountUtils.createAccount(apiKey, &quot;User-From&quot;, 0, &quot;COSMIC_COINS&quot;);&#10;        Assert.assertTrue(fromAccountId &gt; 0, &quot;From account creation failed&quot;);&#10;    }&#10;&#10;    @Test(priority = 3)&#10;    public void createToAccount() {&#10;        toAccountId = AccountUtils.createAccount(apiKey, &quot;User-To&quot;, 0, &quot;COSMIC_COINS&quot;);&#10;        Assert.assertTrue(toAccountId &gt; 0, &quot;To account creation failed&quot;);&#10;    }&#10;&#10;    @Test(priority = 4)&#10;    public void attemptInvalidTransaction() {&#10;        Response res = TransactionUtils.createTransaction(apiKey, fromAccountId, toAccountId, 100, &quot;COSMIC_COINS&quot;);&#10;&#10;        Assert.assertEquals(res.statusCode(), 400, &quot;Status code mismatch&quot;);&#10;        System.out.println(&quot;Response body: &quot; + res.asString());&#10;&#10;        String errorMsg = res.jsonPath().getString(&quot;message&quot;);&#10;        Assert.assertNotNull(errorMsg, &quot;API did not return a 'message' field. Response: &quot; + res.asString());&#10;        Assert.assertTrue(errorMsg.toLowerCase().contains(&quot;insufficient&quot;), &quot;Error message mismatch&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package tests;&#10;&#10;import io.restassured.response.Response;&#10;import org.testng.Assert;&#10;import org.testng.annotations.Test;&#10;import tests.base.BaseTest;&#10;import utils.ApiUtils;&#10;import utils.AccountUtils;&#10;import utils.TransactionUtils;&#10;&#10;public class InvalidTransactionTest extends BaseTest {&#10;    private String apiKey;&#10;    private int fromAccountId;&#10;    private int toAccountId;&#10;&#10;    @Test(priority = 1)&#10;    public void generateApiKey() {&#10;        Response res = ApiUtils.get(&quot;/api/v1/auth&quot;, null); // No apiKey needed for auth&#10;        apiKey = res.jsonPath().getString(&quot;apiKey&quot;);&#10;        Assert.assertNotNull(apiKey, &quot;API Key should not be null&quot;);&#10;    }&#10;&#10;    @Test(priority = 2)&#10;    public void createFromAccountWithZeroBalance() {&#10;        fromAccountId = AccountUtils.createAccount(apiKey, &quot;User-From&quot;, 0, &quot;COSMIC_COINS&quot;);&#10;        Assert.assertTrue(fromAccountId &gt; 0, &quot;From account creation failed&quot;);&#10;    }&#10;&#10;    @Test(priority = 3)&#10;    public void createToAccount() {&#10;        toAccountId = AccountUtils.createAccount(apiKey, &quot;User-To&quot;, 0, &quot;COSMIC_COINS&quot;);&#10;        Assert.assertTrue(toAccountId &gt; 0, &quot;To account creation failed&quot;);&#10;    }&#10;&#10;    @Test(priority = 4)&#10;    public void attemptInvalidTransaction() {&#10;        Response res = TransactionUtils.createTransaction(apiKey, fromAccountId, toAccountId, 100, &quot;COSMIC_COINS&quot;);&#10;&#10;        Assert.assertEquals(res.statusCode(), 400, &quot;Status code mismatch&quot;);&#10;        System.out.println(&quot;Response body: &quot; + res.asString()); // Debug: print full response&#10;&#10;        String errorMsg = res.jsonPath().getString(&quot;message&quot;);&#10;        Assert.assertNotNull(errorMsg, &quot;API did not return a 'message' field. Response: &quot; + res.asString());&#10;        Assert.assertTrue(errorMsg.toLowerCase().contains(&quot;insufficient&quot;), &quot;Error message mismatch&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/tests/ValidTransactionTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/tests/ValidTransactionTest.java" />
              <option name="originalContent" value="package tests;&#10;&#10;import io.restassured.http.ContentType;&#10;import io.restassured.response.Response;&#10;import org.testng.Assert;&#10;import org.testng.annotations.Test;&#10;import tests.base.BaseTest;&#10;import utils.AccountUtils;&#10;import utils.TransactionUtils;&#10;&#10;import static io.restassured.RestAssured.given;&#10;&#10;public class ValidTransactionTest extends BaseTest {&#10;    private String apiKey;&#10;    private int fromAccountId;&#10;    private int toAccountId;&#10;&#10;    @Test(priority = 1)&#10;    public void generateApiKey() {&#10;        Response res = given()&#10;                .get(&quot;/api/v1/auth&quot;)&#10;                .then()&#10;                .statusCode(200)&#10;                .extract().response();&#10;&#10;        apiKey = res.jsonPath().getString(&quot;apiKey&quot;);&#10;        Assert.assertNotNull(apiKey, &quot;API Key should not be null&quot;);&#10;    }&#10;&#10;    @Test(priority = 2)&#10;    public void createFromAccount() {&#10;        fromAccountId = AccountUtils.createAccount(apiKey, &quot;User-From&quot;, 50, &quot;COSMIC_COINS&quot;);&#10;        Assert.assertTrue(fromAccountId &gt; 0);&#10;    }&#10;&#10;    @Test(priority = 3)&#10;    public void createToAccount() {&#10;        toAccountId = AccountUtils.createAccount(apiKey, &quot;User-To&quot;, 0, &quot;COSMIC_COINS&quot;);&#10;        Assert.assertTrue(toAccountId &gt; 0);&#10;    }&#10;&#10;    @Test(priority = 4)&#10;    public void createTransaction() {&#10;        Response res = (Response) TransactionUtils.createTransaction(apiKey, fromAccountId, toAccountId, 20, &quot;COSMIC_COINS&quot;);&#10;        Assert.assertTrue(res.jsonPath().getBoolean(&quot;success&quot;));&#10;    }&#10;&#10;    @Test(priority = 5)&#10;    public void validateBalances() {&#10;        int toBalance = AccountUtils.getBalance(apiKey, toAccountId);&#10;        Assert.assertEquals(toBalance, 20);&#10;&#10;        int fromBalance = AccountUtils.getBalance(apiKey, fromAccountId);&#10;        Assert.assertEquals(fromBalance, 30);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package tests;&#10;&#10;import io.restassured.response.Response;&#10;import org.testng.Assert;&#10;import org.testng.annotations.Test;&#10;import tests.base.BaseTest;&#10;import utils.AccountUtils;&#10;import utils.TransactionUtils;&#10;&#10;import static io.restassured.RestAssured.given;&#10;&#10;public class ValidTransactionTest extends BaseTest {&#10;    private String apiKey;&#10;    private int fromAccountId;&#10;    private int toAccountId;&#10;&#10;    @Test(priority = 1)&#10;    public void generateApiKey() {&#10;        Response res = given()&#10;                .get(&quot;/api/v1/auth&quot;)&#10;                .then()&#10;                .statusCode(200)&#10;                .extract().response();&#10;&#10;        apiKey = res.jsonPath().getString(&quot;apiKey&quot;);&#10;        Assert.assertNotNull(apiKey, &quot;API Key should not be null&quot;);&#10;    }&#10;&#10;    @Test(priority = 2)&#10;    public void createFromAccount() {&#10;        fromAccountId = AccountUtils.createAccount(apiKey, &quot;User-From&quot;, 50, &quot;COSMIC_COINS&quot;);&#10;        Assert.assertTrue(fromAccountId &gt; 0);&#10;    }&#10;&#10;    @Test(priority = 3)&#10;    public void createToAccount() {&#10;        toAccountId = AccountUtils.createAccount(apiKey, &quot;User-To&quot;, 0, &quot;COSMIC_COINS&quot;);&#10;        Assert.assertTrue(toAccountId &gt; 0);&#10;    }&#10;&#10;    @Test(priority = 4)&#10;    public void createTransaction() {&#10;        Response res = (Response) TransactionUtils.createTransaction(apiKey, fromAccountId, toAccountId, 20, &quot;COSMIC_COINS&quot;);&#10;        Assert.assertTrue(res.jsonPath().getBoolean(&quot;success&quot;));&#10;    }&#10;&#10;    @Test(priority = 5)&#10;    public void validateBalances() {&#10;        int toBalance = AccountUtils.getBalance(apiKey, toAccountId);&#10;        Assert.assertEquals(toBalance, 20);&#10;&#10;        int fromBalance = AccountUtils.getBalance(apiKey, fromAccountId);&#10;        Assert.assertEquals(fromBalance, 30);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>